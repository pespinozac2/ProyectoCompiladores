package codigo;

import java_cup.runtime.*;

parser code
{:
    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
:};

terminal Comillas, T_dato, Int, Cadena,If, Else, Elseif, For, While, Do, Return, Break, 
    Op_booleano, NULL, PI, MAX_INT, Op_relacional, Op_incremento, Igual, Suma, Resta, 
    Multiplicacion, Division, Parentesis_a, Parentesis_c, Llave_a, Llave_c, 
    Main, P_coma, Linea, Identificador, Numero, ERROR;
non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, IF, IF_ELSE,
    WHILE, DO_WHILE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR;

start with INICIO;

INICIO ::= Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c |
           Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c
;

SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE
    DO_WHILE |
    SENTENCIA FOR |
    FOR
;

DECLARACION ::= 
    Int Identificador P_coma | 
    Int Identificador Igual Numero P_coma |
    Int Identificador Op_incremento P_coma | 
    Int Op_incremento Identificador P_coma | 
    T_dato Identificador P_coma | 
    T_dato Identificador Igual Numero P_coma |
    Cadena Identificador Igual Comillas Comillas P_coma |
    Cadena Identificador Igual Comillas Identificador Comillas P_coma
;

SENTENCIA_BOOLEANA ::= 
    Op_booleano |
    Identificador Op_relacional Op_booleano |
    Identificador Op_relacional Numero |
    Identificador Op_relacional Identificador |
    Identificador Op_relacional Comillas Comillas |
    Identificador Op_relacional Comillas Identificador Comillas
;

IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;

IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c
;

WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;

DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma
;

FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c
;

SENTENCIA_FOR ::=
    Int Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR
;

DECLARACION_FOR ::= 
    Identificador Op_incremento | 
    Op_incremento Identificador
;